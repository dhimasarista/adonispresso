@layouts.dashboard({title: "Order List"})
  @slot("styles")
    @component('components/styles', {
    loadBootstrap: true,
    loadStyles: true,
    loadIcons:true,
    loadNodeWaves: true,
    loadSimplebar: true,
    loadColorPicker: true,
    loadChoices: true,
    loadDatetimePicker: true,
    loadAutocomplete: true,
    loadDatatables: true,
    })
    @end
  @endslot


  @slot("scripts")
    @component('components/scripts', {
    loadJquery: true,
    loadPopper: true,
    loadBootstrap: true,
    loadDatatables: true,
    loadNodeWaves: true,
    loadSticky: true,
    loadSimplebar: true,
    loadAutocomplete: true,
    loadColorPicker: true,
    loadDatetimePicker: true,
    loadCustomSwitcher: true,
    loadDefaultMenu: true,
    })
    @end
  @endslot
@end
<script>
  // file export datatable
  $('#datatable-table').DataTable({
    "serverSide": true,
    "processing": true,
    "paging": true,
    "searching": { "regex": true },
    "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
    "pageLength": 10,
    dom: 'Bfrtip',
    buttons: [
      'copy', 'csv', 'excel', 'pdf', 'print'
    ],
    language: {
      searchPlaceholder: 'Cari...',
      sSearch: '',
    },
    ajax: {
      url: "/orders?list=true",
      type: "GET",
      dataSrc: "orders"
    },
    columns: [
      {
        data: 'id',
        render: function (data, type, row) {
          return data;
        }
      },
      {
        data: 'totalAmount',
        render: function (data, type, row) {
          return `IDR ${data}`;
        }
      },
      {
        data: "orderItems",
        render: function (data, type, row) {
          var newData = [];
          data.forEach(element => {
            newData.push(`${element.product.name} (${element.quantity})`)
          });
          return newData.join(", ");
        }
      },
      {
        data: 'status',
        render: function (data, type, row) {
          let badge = null;
          switch (data) {
            case "success":
              badge = 'bg-success'
              break;
            case "cancel":
              badge = 'bg-danger'
              break;
            case "pending":
              badge = 'bg-warning'
              break;
            default:
              badge = 'bg-dark text-white'
              break;
          }
          return `<span class="badge ${badge}">${data}</span>`;
        }
      },
      {
        data: 'createdAt',
        render: function (data, type, row) {
          const formattedDate = new Date(data).toLocaleString("id-ID");
          return formattedDate;
        }
      },
      {
        data: "transactionToken",
        render: function (data, type, row) {
          return `
                  <div class="hstack gap-2 fs-15">
                    <a href="javascript:void(0);" class="btn btn-icon btn-sm btn-success-light"><i class="ri-eye-line"></i></a>
                    <a href="javascript:void(0);" class="btn btn-icon btn-sm btn-info-light product-btn"><i class="ri-verified-badge-line"></i></a>
                  </div>
                  `;
        }
      },
    ]
  });
  // file export datatable
</script>
