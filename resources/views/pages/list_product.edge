@layouts.dashboard({title: "Order List"})
@slot("styles")
@component('components/styles', {
loadBootstrap: true,
loadStyles: true,
loadIcons:true,
loadNodeWaves: true,
loadSimplebar: true,
loadColorPicker: true,
loadChoices: true,
loadDatetimePicker: true,
loadAutocomplete: true,
loadDatatables: true,
loadFilePond: true,
loadSweetAlert: true,
})
@end
@endslot
@slot("main")
<!-- Page Header -->
<div class="my-4 page-header-breadcrumb d-flex align-items-center justify-content-between flex-wrap gap-2">
  <div>
    <h1 class="page-title fw-medium fs-18 mb-2">Dashboard</h1>
    <div class="">
      <nav>
        <ol class="breadcrumb mb-0">
          <li class="breadcrumb-item"><a href="javascript:void(0);">Product</a></li>
          <li class="breadcrumb-item active" aria-current="page">List</li>
        </ol>
      </nav>
    </div>
  </div>
  <div class="btn-list">
    <button class="btn btn-secondary btn-wave me-2" hx-get="/orders/statistics" hx-target="#order-statistics"
      hx-trigger="click">
      <i class="bx bx-analyse align-middle"></i> Refresh
    </button>
    <a href="#" class="btn btn-dark btn-wave me-0" data-bs-toggle="modal" data-bs-target="#formProductModal">
      <i class="bi bi-clipboard-plus-fill align-middle"></i> New Product
    </a>
  </div>
</div>
<!-- Page Header Close -->
<!-- Start:: row-4 -->
<div class="row">
  <div class="col-xl-9">
    <div class="card custom-card">
      <div class="card-header">
        <div class="card-title">Products</div>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table id="datatable-table" class="table table-bordered text-nowrap w-100">
            <thead>
              <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Date</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
  <div class="col-xxl-3" hx-get="/orders/topsell" hx-trigger="load">
  </div>
</div>
<!-- End:: row-4 -->
<div class="modal fade" id="formProductModal" tabindex="-1" aria-labelledby="formProductLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="formProductLabel">Form Product</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <label for="name-label" class="form-label">Name</label>
            <input type="text" class="form-control" id="name-form">
          </div>
          <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
            <label for="price-label" class="form-label">Price</label>
            <input type="number" class="form-control number-format" id="price-form">
          </div>
        </div>
        <div class="row pt-2">
          <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
            <label for="file-label" class="form-label">Image</label>
            <input type="file" id="upload-filepond" name="filepond" accept="image/png, image/jpeg, image/gif">
          </div>
          <div class="form-text text-center">The image must be in GIF, JPG, or PNG format and cannot exceed 5MB in size.
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
        <button type="button" id="payButton" class="btn btn-primary" onclick="saveProduct()">Save</button>
      </div>
    </div>
  </div>
</div>
@endslot

@slot("scripts")
@component('components/scripts', {
loadJquery: true,
loadPopper: true,
loadBootstrap: true,
loadDatatables: true,
loadNodeWaves: true,
loadSticky: true,
loadSimplebar: true,
loadAutocomplete: true,
loadColorPicker: true,
loadDatetimePicker: true,
loadCustomSwitcher: true,
loadDefaultMenu: true,
loadFilePond: true,
loadSweetAlert: true,
loadSocketIO: true,
})
@end
@endslot
@end
<script>
  const datatable = $('#datatable-table').DataTable({
    serverSide: true,
    // resetPaging: false,
    processing: true,
    paging: true,
    searching: { "regex": true },
    lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
    pageLength: 10,
    dom: 'Bfrtip',
    buttons: [
      'copy', 'csv', 'excel', 'pdf', 'print'
    ],
    language: {
      searchPlaceholder: 'Search By Name...',
      sSearch: '',
    },
    ajax: {
      url: "/products/list",
      type: "GET",
      dataSrc: "products",
    },
    columns: [
      {
        data: "name",
        render: function (data, type, row) {
          const defaultImage = "../assets/images/ecommerce/jpg/3.jpg";
          const image = row.image ? `/storage/products/${row.image}` : defaultImage;
          return `
          <div class="d-flex align-items-center flex-wrap">
              <div class="me-3 lh-1">
                  <span class="avatar avatar-md">
                      <img src="${image}" alt="${data}">
                  </span>
              </div>
              <div class="flex-fill">
                  <span class="d-block mb-0 fw-semibold">${data}</span>
                  <span class="text-muted fs-13">${row.id}</span>
              </div>
          </div>
          `;
        }
      },
      {
        data: "price",
        render: function (data, type, row) {
          return `IDR ${formatNumberWithDots(data)}`;
        }
      },
      {
        data: 'createdAt',
        render: function (data, type, row) {
          const formattedDate = new Date(data).toUTCString()
          return formattedDate;
        }
      },
      {
        data: 'id',
        render: function (data, type, row) {
          return `
                  <div class="hstack gap-2 fs-15">
                    <button class="btn btn-icon btn-sm btn-success-light" onclick="editProductForm('${data}')">
                      <i class="ri-edit-2-fill"></i>
                    </button>
                    <button class="btn btn-icon btn-sm btn-danger" onclick="deleteProduct('${data}')"><i class="ri-delete-bin-2-fill"></i></button>
                  </div>
                  `;
        }
      },
    ]
  });

  FilePond.registerPlugin(
    FilePondPluginImagePreview,
    FilePondPluginImageExifOrientation,
    FilePondPluginFileValidateSize,
    FilePondPluginFileEncode,
    FilePondPluginImageEdit,
    FilePondPluginFileValidateType,
    FilePondPluginImageCrop,
    FilePondPluginImageResize,
    FilePondPluginImageTransform
  );

  /* multiple upload */
  const queryUpload = document.querySelector('#upload-filepond');
  const optionsFilePond = {
    allowFileRename: true,
    acceptedFileTypes: ['image/jpeg', 'image/png', 'image/gif'], // Menerima format jpeg, png, gif
    maxFileSize: '5MB', // Ukuran maksimal file 5MB
    server: {
      process: {
        url: '/products/image', // API endpoint path
        method: 'POST',
        onload: (response) => {
          return response;
        },
        onerror: (error) => {
          Swal.fire({
            title: "Error",
            text: error,
            timer: 1000,
            showConfirmButton: false,
            icon: 'danger'
          });
        }
      },
      revert: (uniqueFileId, load) => {
        fetch('/products/image', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ image: uniqueFileId }), // Kirim nama file hasil rename
        })
          .then((response) => {
            if (response.ok) {
              load();
            } else {
              Swal.fire({
                title: "Error",
                text: response.statusText,
                timer: 1000,
                showConfirmButton: false,
                icon: 'error'
              });
            }
          })
          .catch((error) => {
            Swal.fire({
              title: "Error",
              text: error,
              timer: 1000,
              showConfirmButton: false,
              icon: 'error'
            });
          });
      },
    }
  };
  const uploadImage = FilePond.create(queryUpload);
  $("#upload-filepond").click(function () {
    uploadImage.setOptions(optionsFilePond);
  })
  function removeFile() {
    const files = uploadImage.getFiles(); // Get all files from FilePond
    if (files.length > 0) {
      // Remove the first file from the list
      uploadImage.removeFiles(files[0]);
    }
  }
  window.addEventListener('beforeunload', (event) => {
    removeFile();
  });
  $('#formProductModal').on('hidden.bs.modal', function () {
    $("#formProductModal").removeAttr("product-id")
    $("#name-form").val(null);
    $("#price-form").val(null);
    removeFile(); // Call removeFile when the modal is closed
  });
  function saveProduct() {
    let image = "";
    const id = $("#formProductModal").attr("product-id")
    const formData = new FormData();
    let httpMethod = "POST";

    // if id exist it will be updating data
    if (id) {
      formData.append("id", id);
      httpMethod = "PUT";
    }

    // this logic use for checking file it will be update or create
    let file = uploadImage.getFile();  // taking first file
    if (file) { // if file exists
      const lastFile = uploadImage.getFiles().pop();  // take the last file
      // checking the file has serverId, if not using filename
      image = lastFile.serverId || lastFile.filename;
    }

    // append data to formdata
    formData.append("name", $("#name-form").val());
    formData.append("price", $("#price-form").val());
    formData.append("image", image);

    $.ajax({
      url: '/products',
      type: httpMethod,
      data: formData,
      processData: false,  // Jangan memproses data
      contentType: false,  // Jangan set Content-Type secara manual
      success: function (response) {
        $("#name-form").val(null)
        $("#price-form").val(null)
        uploadImage.removeFiles();
        $("#formProductModal").modal("hide")
        Swal.fire({
          title: "Success",
          text: response.message,
          timer: 1000,
          showConfirmButton: false,
          icon: 'success'
        });
      },
      error: function (jqXHR, textStatus, errorThrown) {
        uploadImage.removeFile();
        Swal.fire({
          title: "Error",
          text: errorThrown,
          timer: 1000,
          showConfirmButton: false,
          icon: 'error'
        });
      },
      complete: function (jqXHR, textStatus) {
        datatable.ajax.reload(null, false);
      }
    });
  }
  function editProductForm(productId) {
    $.ajax({
      url: `/products/${productId}`,
      type: 'GET',
      success: function (data) {
        const product = data["data"];
        if (product) {
          $("#formProductModal").attr("product-id", product["id"]);
          $("#name-form").val(product["name"]);
          $("#price-form").val(product["price"]);
          if (product["image"]) {
            uploadImage.server = false;
            uploadImage.addFile(`storage/products/${product.image}`).then(() => { });
          }
          $("#formProductModal").modal("show");
        }
      },
      error: function (jqXHR, textStatus, errorThrown) {
        Swal.fire({
          title: "Error",
          text: errorThrown,
          timer: 1000,
          showConfirmButton: false,
          icon: 'error'
        });
      }
    });
  }
  function deleteProduct(id) {
    Swal.fire({
      title: 'Are you sure?',
      text: 'This action cannot be undone!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'Cancel',
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: `/products?id=${id}`,
          type: 'DELETE',
          success: function (data) {
            Swal.fire({
              title: "Success",
              text: data["message"],
              timer: 1000,
              showConfirmButton: false,
              icon: 'success'
            });
          },
          error: function (jqXHR, textStatus, errorThrown) {
            Swal.fire({
              title: "Error",
              text: errorThrown,
              timer: 1000,
              showConfirmButton: false,
              icon: 'error'
            });
          },
          complete: function (jqXHR, textStatus) {
            datatable.ajax.reload(null, false);
          }
        });
      }
    })
  }
</script>
<script>
  socket.on("update_product_table", () => {
    datatable.ajax.reload(null, false);
  });
</script>
